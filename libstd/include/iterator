/// @file iterator
/// @data 16/04/2014 11:45:53
/// @author Ambroise Leclerc
/// @brief Provides definition for iterators, iterator traits, adapters.
//
// Copyright (c) 2014, Ambroise Leclerc
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//
//   * Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//   * Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in
//     the documentation and/or other materials provided with the
//     distribution.
//   * Neither the name of the copyright holders nor the names of
//     contributors may be used to endorse or promote products derived
//     from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'
//  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
//  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
//  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
//  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
//  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
//  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
//  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
//  POSSIBILITY OF SUCH DAMAGE.
#pragma once

#include "initializer_list"

namespace std {

// Iterator_tags : define the category of an iterator.
struct input_iterator_tag { };
struct output_iterator_tag { };
struct forward_iterator_tag : public input_iterator_tag { };
struct bidirectional_iterator_tag : public forward_iterator_tag { };
struct random_access_iterator_tag : public bidirectional_iterator_tag { };

template<typename Iterator>
struct iterator_traits {
    using iterator_category = typename Iterator::iterator_category;
    using value_type = typename Iterator::value_type;
    using difference_type = typename Iterator::difference_type;
    using pointer = typename Iterator::pointer;
    using reference = typename Iterator::reference;
};


/// iterator_traits specialization for raw pointers.
template<typename T>
struct iterator_traits<T*> {
    using iterator_category = random_access_iterator_tag;
    using value_type = T;
    using difference_type = std::ptrdiff_t;
    using pointer = T*;
    using reference = T&;
};

/// iterator_traits specialization for const raw pointers.
template<typename T>
struct iterator_traits<const T*> {
    using iterator_category = random_access_iterator_tag;
    using value_type = T;
    using difference_type = std::ptrdiff_t;
    using pointer = const T*;
    using reference = const T&;
};

template<typename Category, typename T, typename Distance = std::ptrdiff_t,
    typename Pointer = T*, typename Reference = T&>
    struct iterator {
    using iterator_category = Category;
    using value_type = T;
    using difference_type = Distance;
    using pointer = Pointer;
    using reference = Reference;
};

template<typename Iterator>
class reverse_iterator : public iterator< typename iterator_traits<Iterator>::iterator_category,
    typename iterator_traits<Iterator>::value_type,
    typename iterator_traits<Iterator>::difference_type,
    typename iterator_traits<Iterator>::pointer,
    typename iterator_traits<Iterator>::reference > {
public:
    using iterator_type = Iterator;
    using difference_type = typename std::iterator_traits<iterator_type>::difference_type;
    using pointer = typename std::iterator_traits<iterator_type>::pointer;
    using reference = typename std::iterator_traits<iterator_type>::reference;

    /// Constructs a reverse iterator that points to no object.
    reverse_iterator() : current_() {}

    /// Constructs a reverse iterator from some original operator it.
    explicit reverse_iterator(iterator_type it) : current_(it) {}

    /// Constructs a reverse iterator from some other reverse iterator.
    template <class Iter>
    reverse_iterator(const reverse_iterator<Iter>& rev_it) : current_(rev_it.base()) {}

    /// Returns a copy of the base iterator.  
    iterator_type base() const { return current_; }

    /// Returns a reference to the element previous to current.
    reference operator*() const { Iterator tmp = current_; return *--tmp; }

    reverse_iterator<Iterator> operator+(difference_type n) const { return reverse_iterator<Iterator>(current_ - n); }
    reverse_iterator<Iterator> operator-(difference_type n) const { return reverse_iterator<Iterator>(current_ + n); }
    reverse_iterator<Iterator>& operator+=(difference_type n) const { current_ -= n; return *this; }
    reverse_iterator<Iterator>& operator-=(difference_type n) const { current_ += n; return *this; }
    reverse_iterator<Iterator>& operator++() const { --current_; return *this; }
    reverse_iterator<Iterator>& operator--() const { ++current_; return *this; }
    reverse_iterator<Iterator>& operator++(int) const { reverse_iterator<Iterator> tmp = *this; --current_; return tmp; }
    reverse_iterator<Iterator>& operator--(int) const { reverse_iterator<Iterator> tmp = *this; ++current_; return tmp; }

    pointer operator->() const { return std::addressof(operator*()); }
    reference operator[](difference_type n) const { return *(*this + n); }

protected:
    Iterator current_;
};

// Non member relation operators
template<typename Iterator1, typename Iterator2>
bool operator==(const reverse_iterator<Iterator1>& lhs,
    const reverse_iterator<Iterator2>& rhs) {
    return lhs.base() == rhs.base();
}

template<typename Iterator1, typename Iterator2>
bool operator!=(const reverse_iterator<Iterator1>& lhs,
    const reverse_iterator<Iterator2>& rhs) {
    return lhs.base() = !rhs.base();
}

template<typename Iterator1, typename Iterator2>
bool operator<(const reverse_iterator<Iterator1>& lhs,
    const reverse_iterator<Iterator2>& rhs) {
    return lhs.base() > rhs.base();
}

template<typename Iterator1, typename Iterator2>
bool operator<=(const reverse_iterator<Iterator1>& lhs,
    const reverse_iterator<Iterator2>& rhs) {
    return lhs.base() >= rhs.base();
}

template<typename Iterator1, typename Iterator2>
bool operator>(const reverse_iterator<Iterator1>& lhs,
    const reverse_iterator<Iterator2>& rhs) {
    return lhs.base() < rhs.base();
}

template<typename Iterator1, typename Iterator2>
bool operator>=(const reverse_iterator<Iterator1>& lhs,
    const reverse_iterator<Iterator2>& rhs) {
    return lhs.base() <= rhs.base();
}

// Specializations
template<typename T>
constexpr const T* rbegin(initializer_list<T> list) noexcept { return std::reverse_iterator<const T*>(list.end()); }

template<typename T>
constexpr const T* rend(initializer_list<T> list) noexcept { return std::reverse_iterator<const T*>(list.begin()); }

template<typename Iterator>
class move_iterator {
public:
    using iterator_type = Iterator;
    using iterator_category = typename std::iterator_traits<iterator_type>::iterator_category;
    using value_type = typename std::iterator_traits<iterator_type>::value_type;
    using difference_type = typename std::iterator_traits<iterator_type>::difference_type;
    using pointer = typename std::iterator_traits<iterator_type>::pointer;
    using reference = value_type&&;

    /// Constructs a move iterator that points to no object.
    move_iterator() : current_() {}

    /// Constructs a move iterator from some original operator it.
    explicit move_iterator(iterator_type it) : current_(it) {}

    /// Constructs a move iterator from some other move iterator.
    template <class Iter>
    move_iterator(const move_iterator<Iter>& rev_it) : current_(rev_it.base()) {}

    /// Returns a copy of the base iterator.  
    iterator_type base() const { return current_; }

    /// Returns a reference to the element pointed by the iterator.
    reference operator*() const { return static_cast<reference>(*current_); }
    pointer operator->() const { return &(operator*()); }

    move_iterator<Iterator> operator+(difference_type n) const { return move_iterator<Iterator>(current_ + n); }
    move_iterator<Iterator> operator-(difference_type n) const { return move_iterator<Iterator>(current_ - n); }
    move_iterator<Iterator>& operator+=(difference_type n) const { current_ += n; return *this; }
    move_iterator<Iterator>& operator-=(difference_type n) const { current_ -= n; return *this; }
    move_iterator<Iterator>& operator++() { ++current_; return *this; }
    move_iterator<Iterator>& operator--() { --current_; return *this; }
    move_iterator<Iterator>& operator++(int) { move_iterator<Iterator> tmp = *this; ++current_; return tmp; }
    move_iterator<Iterator>& operator--(int) { move_iterator<Iterator> tmp = *this; --current_; return tmp; }
    reference operator[](difference_type n) const { return *(*this + n); }

protected:
    Iterator current_;
};

// Non member relation operators
template<typename Iterator1, typename Iterator2>
bool operator==(const move_iterator<Iterator1>& lhs,
    const move_iterator<Iterator2>& rhs) {
    return lhs.base() == rhs.base();
}

template<typename Iterator1, typename Iterator2>
bool operator!=(const move_iterator<Iterator1>& lhs,
    const move_iterator<Iterator2>& rhs) {
    return lhs.base() = !rhs.base();
}

template<typename Iterator1, typename Iterator2>
bool operator<(const move_iterator<Iterator1>& lhs,
    const move_iterator<Iterator2>& rhs) {
    return lhs.base() > rhs.base();
}

template<typename Iterator1, typename Iterator2>
bool operator<=(const move_iterator<Iterator1>& lhs,
    const move_iterator<Iterator2>& rhs) {
    return lhs.base() >= rhs.base();
}

template<typename Iterator1, typename Iterator2>
bool operator>(const move_iterator<Iterator1>& lhs,
    const move_iterator<Iterator2>& rhs) {
    return lhs.base() < rhs.base();
}

template<typename Iterator1, typename Iterator2>
bool operator>=(const move_iterator<Iterator1>& lhs,
    const move_iterator<Iterator2>& rhs) {
    return lhs.base() <= rhs.base();
}

/// Convenience function template that constructs a std::reverse_iterator from
/// the given iterator iter.
/// @param iter iterator to be converter to reverse_iterator
/// @return a std::reverse_iterator constructed from iter
template<typename Iterator>
reverse_iterator<Iterator> make_reverse_iterator(Iterator iter) {
    return reverse_iterator<Iterator>(iter);
}

/// Convenience function template that constructs a std::move_iterator from
/// the given iterator iter.
/// @param iter iterator to be converter to move_iterator
/// @return a std::move_iterator constructed from iter
template<typename Iterator >
move_iterator<Iterator> make_move_iterator(Iterator iter) {
    return move_iterator<Iterator>(iter);
}


} // namespace std  

