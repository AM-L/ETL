/// @file chrono
/// @data 03/06/2016 21:23:53
/// @author Ambroise Leclerc
/// @brief Time library
//
// Copyright (c) 2016, Ambroise Leclerc
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//
//   * Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//   * Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in
//     the documentation and/or other materials provided with the
//     distribution.
//   * Neither the name of the copyright holders nor the names of
//     contributors may be used to endorse or promote products derived
//     from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'
//  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
//  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
//  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
//  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
//  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
//  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
//  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
//  POSSIBILITY OF SUCH DAMAGE.
#pragma once

#include <../libstd/include/ratio>
#include <../libstd/include/limits>

namespace std {
namespace chrono {

template<typename Rep> struct duration_values {
    static constexpr Rep zero() { return Rep(0); }
    static constexpr Rep min()  { return numeric_limits<Rep>::lowest(); }
    static constexpr Rep max()  { return numeric_limits<Rep>::max(); }
};

// std::common_type specialization for std::chrono::duration
template<typename Rep1, typename Period1, typename Rep2, typename Period2>
struct common_type<duration<Rep1, Period1>, duration<Rep2, Period2>> {
    using type = duration<typename common_type<Rep1, Rep2>::type, typename etlHelper::PGCD<Period1, Period2>::type> type;
};

namespace etlHelper {
    template<typename T>                    struct is_duration : false_type {};
    template<typename Rep, typename Period> struct is_duration : true_type {};
    template<typename Rep, typename Period> struct is_duration<const duration<Rep, Period>> : true_type {};
    template<typename Rep, typename Period> struct is_duration<volatile duration<Rep, Period>> : true_type {};
    template<typename Rep, typename Period> struct is_duration<const volatile duration<Rep, Period>> : true_type {};

    template<typename From, typename To,
             typename Period = typename ratio_divide<typename From::period, typename To::period>::type,
             bool = Period::num == 1, bool = Period::den == 1>
    struct duration_cast;

    template<typename From, typename To, typename Period>
    struct duration_cast<From, To, Period, true, true> {
        constexpr To operator()(const From& dur) const { return To(static_cast<typename To::rep>(dur.count())); }
    };

    template<typename From, typename To, typename Period>
    struct duration_cast<From, To, Period, true, false> {
        constexpr To operator()(const From& dur) const {
            using ComRep = common_type<typename To::rep, typename From::rep, intmax_t>::type;
            return To(static_cast<typename To::rep>(static_cast<ComRep>(dur.count()) * static_cast<ComRep>(Period::num)));
        }
    };

    template<typename From, typename To, typename Period>
    struct duration_cast<From, To, Period, false, false> {
        constexpr To operator()(const From& dur) const {
            using ComRep = common_type<typename To::rep, typename From::rep, intmax_t>::type;
            return To(static_cast<typename To::rep>(static_cast<ComRep>(dur.count()) * static_cast<ComRep)(Period::num) / static_cast<ComRep>(Period::den)));
        }
    };
} // namespace etlHelper
/*
/// Converts a std::chrono::duration to a duration of different type ToDuration
template<typename ToDuration, typename Rep, typename Period>
constexpr ToDuration duration_cast(const duration<Rep, Period>& ticks) {

}
*/
template<typename Rep, typename Period = ratio<1>>
class duration {
    static_assert(etlHelper::is_ratio<Period>::value, "duration<Rep, Period> : Period template parameter must be a std::ratio");
public:
    using rep = Rep;
    using period = Period;

    constexpr duration() = default;
    duration(const duration&) = default;
    ~duration() = default;
    duration& operator=(const duration&) = default;
    template<typename Rep2> constexpr duration(const Rep2& ticks) : ticksCount(static_cast<rep>(ticks)) {}
    template<typename Rep2, typename Period2> constexpr duration(const duration<Rep2, Period2>& ticks) : ticksCount(duration_cast<)
    constexpr rep count() const { return ticksCount; }

    constexpr duration operator+() const        { return *this; }
    constexpr duration operator-() const        { return duration(-ticksCount); }
    duration& operator++()                      { ++ticksCount; return *this; }
    duration  operator++(int)                   { return duration(ticksCount++); }
    duration& operator--()                      { --ticksCount; return *this; }
    duration  operator--(int)                   { return duration(ticksCount--); }
    duration& operator+=(const duration& d)     { ticksCount += d.count(); return *this; }
    duration& operator-=(const duration& d)     { ticksCount -= d.count(); return *this; }
    duration& operator*=(const rep& rhs)        { rep *= rhs; return *this; }
    duration& operator/=(const rep& rhs)        { rep /= rhs; return *this; }
    duration& operator%=(const rep& rhs)        { rep %= rhs; return *this; }
    duration& operator%=(const duration& rhs)   { rep %= rhs.count(); return *this; }

    static constexpr duration zero()            { return duration(duration_values<rep>::zero()); }
    static constexpr duration min()             { return duration(duration_values<rep>::min()); }
    static constexpr duration max()             { return duration(duration_values<rep>::max()); }

private:
    rep ticksCount;
};

using nanoseconds   = duration<uint64_t, nano>;
using microseconds  = duration<uint64_t, micro>;
using milliseconds  = duration<uint64_t, milli>;
using seconds       = duration<uint64_t>;
using minutes       = duration<uint32_t, ratio<60>>;
using hours         = duration<uint32_t, ratio<3600>>;

} // namespace chrono

inline namespace literals {
inline namespace chrono_literals {
constexpr chrono::microseconds operator ""us(unsigned long long us) { return chrono::microseconds(static_cast<chrono::microseconds::rep>(us)); }

constexpr chrono::duration<long double, chrono::micro> operator ""us(long double us) {
    return chrono::duration<long double, chrono::micro>(us);
}

} // namespace chrono_literals
} // namespace literals

} // namespace std
