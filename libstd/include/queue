/// @file queue
/// @data 20/09/2016 17:40:53
/// @author Ambroise Leclerc and Cécile Gomes
/// @brief Container adapter that gives the functionality of a fifo.
//
// Copyright (c) 2014, Ambroise Leclerc
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//
//   * Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//   * Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in
//     the documentation and/or other materials provided with the
//     distribution.
//   * Neither the name of the copyright holders nor the names of
//     contributors may be used to endorse or promote products derived
//     from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'
//  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
//  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
//  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
//  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
//  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
//  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
//  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
//  POSSIBILITY OF SUCH DAMAGE.

#pragma once
/*#include <../libstd/include/iterator>
#include <../libstd/include/algorithm>
#include <../libstd/include/stdexcept>
*/

namespace std {

template<typename T, typename Container /* TODO = std::deque<T>*/>
class queue {
public:
    auto empty() {
        return container.size() == 0;
    }

    auto size() {
        return container.size();
    }

    auto front() {
        return container.front();
    }

    void pop() {
        container.pop_front();
    }

    auto back() {
        return container.back();
    }

    void push(T element) {
        container.push_back(element);
    }

    template<typename... Args>
    void emplace(Args&& ... args) {
        container.emplace_back(std::forward<Args>(args)...);
    }

    void swap(queue<T, Container>& right) {
        Container* pointeurLeft = &container;
        Container* pointeurRight = &right.container;
        Container temp = *pointeurLeft;
        *pointeurLeft = *pointeurRight;
        *pointeurRight = temp;
    }

protected:
    Container container;
};


} // namespace std
