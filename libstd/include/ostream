

/// @file oastream
/// @data 18/05/2016 16:31:53
/// @author Ambroise Leclerc, Cécile Gomes
/// @brief basic ostream.
//
// Copyright (c) 2014, Ambroise Leclerc
//   All rights reserved.
//
//   Redistribution and use in source and binary forms, with or without
//   modification, are permitted provided that the following conditions are met:
//
//   * Redistributions of source code must retain the above copyright
//     notice, this list of conditions and the following disclaimer.
//   * Redistributions in binary form must reproduce the above copyright
//     notice, this list of conditions and the following disclaimer in
//     the documentation and/or other materials provided with the
//     distribution.
//   * Neither the name of the copyright holders nor the names of
//     contributors may be used to endorse or promote products derived
//     from this software without specific prior written permission.
//
//  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'
//  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
//  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
//  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
//  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
//  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
//  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
//  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
//  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
//  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
//  POSSIBILITY OF SUCH DAMAGE.
#pragma once

#include "string"

namespace std {

template<typename CharT, typename Traits = char_traits<CharT>>
class basic_streambuf {
public:
    using char_type = CharT;
    using traits_type = Traits;
    using int_type = Traits::int_type;
    using pos_type = Traits::pos_type;
    using off_type = Traits::off_type;

    
    auto eback() const { return getBeg; }   ///< Returns the pointer to the beginning of the get area. 
    auto gptr() const { return getCur; }    ///< Returns the pointer to the current character in the get area.
    auto egptr() const { return getEnd; }   ///< Returns the pointer to the end of the get area.
    auto pbase() const { return getBeg; }   ///< Returns the pointer to the beginning of the put area. 
    auto pptr() const { return getCur; }    ///< Returns the pointer to the current character in the put area.
    auto epptr() const { return getEnd; }   ///< Returns the pointer to the end of the put area.

protected:
    basic_streambuf() : getBeg(nullptr), getCur(nullptr), getEnd(nullptr), 
                        putBeg(nullptr), putCur(nullptr), putEnd(nullptr) { }

    basic_streambuf(const basic_streambuf& rhs) : getBeg(rhs.eback()), getCur(rhs.gptr()), getEnd(rhs.egptr()),
                                                  putBeg(rhs.pbase()), putCur(rhs.pptr()), putEnd(rhs.epptr()) { }
private:
    using Ptr = char_type*;
    Ptr getBeg, getCur, getEnd;
    Ptr putBeg, putCur, putEnd;
};

template<typename CharT, typename Traits = char_traits<CharT>>
class basic_ostream {
public:
    using char_type = CharT;
    using traits_type = Traits;
    using int_type = Traits::int_type;
    using pos_type = Traits::pos_type;
    using off_type = Traits::off_type;

    explicit basic_ostream(std::basic_streambuf<CharT, Traits>* sb) {

    }

    operator<<(const char_type* zString) {
        auto length = traits_type::length(zString);
        traits_type::copy(pptr(), zString, length);
    }

protected:
    basic_ostream(const basic_ostream& rhs) = delete;
    basic_ostream(const basic_ostream&& rhs) = delete;  // not standard compliant : when implemented, basic_ofstream and basic_ostringstream will need this constructor
};

} // namespace std
